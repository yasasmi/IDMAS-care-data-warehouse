
Drop Table error_log_table;
-- Create an error log table
CREATE TABLE error_log_table (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    error_message VARCHAR2(4000),
    log_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--missing data in Time_dim
DECLARE
    v_error_message VARCHAR2(4000);
    v_count_missing_data NUMBER;
BEGIN
    
    SELECT COUNT(*)
    INTO v_count_missing_data
    FROM Time_dim
    WHERE Time_Id IS NULL OR Day IS NULL OR Month IS NULL OR Year IS NULL OR DATASOURCE IS NULL;

    
    IF v_count_missing_data > 0 THEN
        v_error_message := 'Error: Some rows in Time_dim have missing data in Time_Id, Day, Month, Year, or DATASOURCE.';
        
     
        INSERT INTO error_log_table (error_message) VALUES (v_error_message);
    END IF;
END;


-- missing data in Bed_dim
DECLARE
    v_error_message VARCHAR2(4000);
    v_count_missing_data NUMBER;
BEGIN
   
    SELECT COUNT(*)
    INTO v_count_missing_data
    FROM Bed_dim
    WHERE Bed_No IS NULL OR Bed_Type IS NULL OR Bed_Status IS NULL OR DATASOURCE IS NULL;

    
    IF v_count_missing_data > 0 THEN
        v_error_message := 'Error: Some rows in Bed_dim have missing data in Bed_No, Bed_Type, Bed_Status, or DATASOURCE.';
        
    
        INSERT INTO error_log_table (error_message) VALUES (v_error_message);
    END IF;
END;


--missing data in Ward 
DECLARE
    v_error_message VARCHAR2(4000);
    v_count_missing_data NUMBER;
BEGIN
    
    SELECT COUNT(*)
    INTO v_count_missing_data
    FROM Ward
    WHERE Ward_Id IS NULL OR ward_Name IS NULL OR Ward_Capacity IS NULL OR DATASOURCE IS NULL;

    
    IF v_count_missing_data > 0 THEN
        v_error_message := 'Error: Some rows in Ward have missing data in Ward_Id, ward_Name, Ward_Capacity, or DATASOURCE.';
        
        INSERT INTO error_log_table (error_message) VALUES (v_error_message);
    END IF;
END;


-- missing data in Care_Center
DECLARE
    v_error_message VARCHAR2(4000);
    v_count_missing_data NUMBER;
BEGIN

    SELECT COUNT(*)
    INTO v_count_missing_data
    FROM Care_Center
    WHERE Care_Id IS NULL OR Name IS NULL OR DATASOURCE IS NULL;

    
    IF v_count_missing_data > 0 THEN
        v_error_message := 'Error: Some rows in Care_Center have missing data in Care_Id, Name, or DATASOURCE.';
        
        
        INSERT INTO error_log_table (error_message) VALUES (v_error_message);
    END IF;
END;


-- View the error log table
SELECT * FROM error_log_table;

DELETE FROM BedOccupency_Fact WHERE Time_Id = 27;
DELETE FROM Time_dim WHERE Time_Id = 27;

DELETE FROM BedOccupency_Fact WHERE Time_Id = 37;
DELETE FROM Time_dim WHERE Time_Id = 37;


SELECT *
FROM Time_dim
WHERE Time_Id IS NULL OR Day IS NULL OR Month IS NULL OR Year IS NULL OR DATASOURCE IS NULL;



SELECT * FROM Ward
FETCH FIRST 20 ROWS ONLY;

UPDATE WARD
SET WARD_NAME = UPPER(WARD_NAME);

-- Update 'GENERAL WARD' to 'GENERAL CARE'
UPDATE WARD
SET WARD_NAME = 'GENERAL CARE'
WHERE WARD_NAME = 'GENERAL WARD';

select * from Care_Center
FETCH FIRST 20 ROWS ONLY;

UPDATE Care_Center
SET NAME = UPPER(NAME);

select * from Bed_dim
FETCH FIRST 20 ROWS ONLY;

UPDATE Bed_dim
SET BED_TYPE = 'MANUAL'
where BED_NO = 2;

select * from BEDOCCUPENCY_FACT
FETCH FIRST 20 ROWS ONLY;

DECLARE
    v_error_message VARCHAR2(4000);
BEGIN
    FOR dup_record IN (SELECT WARD_ID, COUNT(*) AS duplicate_count
                       FROM BEDOCCUPENCY_FACT
                       GROUP BY WARD_ID
                       HAVING COUNT(*) > 1)
    LOOP
        v_error_message := 'Error: Duplicate value found in BEDOCCUPENCY_FACT table for WARD_ID ' || dup_record.WARD_ID ||
                           '. Duplicate count: ' || dup_record.duplicate_count;

        -- Insert the error message into the error log table
        INSERT INTO error_log_table (error_message) VALUES (v_error_message);
    END LOOP;
END;
/

select * from error_log_table

SELECT WARD_ID, COUNT(*) AS duplicate_count
                       FROM BEDOCCUPENCY_FACT
                       GROUP BY WARD_ID
                       HAVING COUNT(*) > 1

 DELETE FROM BEDOCCUPENCY_FACT
WHERE ROWID NOT IN (
    SELECT MIN(ROWID)
    FROM BEDOCCUPENCY_FACT
    GROUP BY Bed_No,Care_Id, WARD_ID
    HAVING COUNT(*) > 1
); 

select * from BEDOCCUPENCY_FACT

SELECT WARD_ID, Time_Id, Care_Id, COUNT(*) AS Duplicate_Count
FROM BEDOCCUPENCY_FACT
GROUP BY Bed_No,Care_Id, WARD_ID
HAVING COUNT(*) > 1;